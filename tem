class Login extends React.Component {
  state = {
    email: "",
    password: ""
  };

  emailValidation(){
    const regex = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
    if(!this.state.email || regex.test(this.state.email) === false){
        this.setState({
            error: "Email is not valid"
        });
        return false;
    }
    return true;
}

  handleChange = e => {
    const { name, value } = e.target;
    this.setState({ [name]: value });
  };

  handleSubmit = e => {
    e.preventDefault();
    this.props.login(true);
    this.setState({ email: "", password: "" });
  };
  render() {
    const { email, password } = this.state;
    return (
      <div className="login">
        <div className="form">
    
          <form onSubmit={this.handleSubmit}>
          <span>LOGIN</span><br/>
            <input
              type="email"
              placeholder="email..."
              name="email"
              required
              onChange={this.handleChange}
              value={email}
            />
            <span>{this.state.error}</span>
            <input
              type="password"
              placeholder="password..."
              name="password"
              required
              onChange={this.handleChange}
              value={password}
            />
            <button onSubmit={this.handleSubmit}>Log in</button>
          </form>
         </div>
         </div> 
    
    );
  }
}


class Login extends React.Component {
  state = {
    email: "",
    password: ""
  };

   validateEmail = (e) => {
    var email = e.target.value;

    if (validator.isEmail(email)) {
      setMessage("Thank you");
    } else {
      setMessage("Please, enter valid Email!");
    }
  };

  handleChange = e => {
    const { name, value } = e.target;
    this.setState({ [name]: value });
  };

  handleSubmit = e => {
    e.preventDefault();
    this.props.login(true);
    this.setState({ email: "", password: "" });
  };
  render() {
    const { email, password } = this.state;
    return (
      <div className="login">
        <div className="form">
    
          <form onSubmit={this.handleSubmit}>
          <span>LOGIN</span><br/>
            <input
              type="email"
              placeholder="email..."
              name="email"
              required
              onChange={this.handleChange}
              value={email}
            />
            <span>{this.state.error}</span>
            <input
              type="password"
              placeholder="password..."
              name="password"
              required
              onChange={this.handleChange}
              value={password}
            />
            <button onSubmit={this.handleSubmit}>Log in</button>
          </form>
         </div>
         </div> 
    
    );
  }
}



// class CreateEmployee extends Component {

//   constructor(props){
//     super(props);
//     this.handleChange = this.handleChange.bind(this);
//     this.handleSubmit = this.handleSubmit.bind(this);
//     this.state = {
//       name: ''
//     }
//   }

//   handleChange(e){
//     this.setState({
//       name: e.target.value
//     })
//   }

//   handleSubmit(e){
//     e.preventDefault();
//     let contact = {
//       name: this.state.name
//     }
//     this.props.createContact(contact);
//   }

//   render() {

//     return(
//       <div className='form'>
//         <h1>Clientside Contacts Application</h1>
//         <hr />
//         { <ul>
//           {this.props.contacts.map((contact, i) => <li key={i}>{contact.name}</li> )}
//         </ul> }
//         <div>
//           <h3>Add Contact Form</h3>
//           <form onSubmit={this.handleSubmit}>
//             <input type="text" onChange={this.handleChange} />
//             <input type="submit" />
//           </form>
//         </div>
//       </div>
//     )
//   }
// }

// const mapStateToProps = (state, ownProps) => {
//   return {
//     contacts: state.contacts
//   }
// };

// const mapDispatchToProps = (dispatch) => {
//   return {
//     createContact: contact => dispatch(contactAction.createContact(contact))
//   }
// };

// export default connect(mapStateToProps, mapDispatchToProps)(CreateEmployee);

